/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

plugins {
    id 'java'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/jakarta.servlet/jakarta.servlet-api
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'

    compileOnly 'jakarta.faces:jakarta.faces-api:3.0.0'

    // https://mvnrepository.com/artifact/jakarta.enterprise/jakarta.enterprise.cdi-api
    compileOnly 'jakarta.enterprise:jakarta.enterprise.cdi-api:4.0.1'

    implementation 'org.hibernate:hibernate-core:5.6.0.Final'
    implementation 'org.postgresql:postgresql:42.3.1'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'


    // JUnit Jupiter API и Engine
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'

    // Testcontainers
    testImplementation 'org.testcontainers:junit-jupiter:1.16.3'
    testImplementation 'org.testcontainers:postgresql:1.16.3'
    implementation 'org.testcontainers:postgresql:1.16.3'

    // Драйвер JDBC для PostgreSQL
    testImplementation 'org.postgresql:postgresql:42.2.23'

    // https://mvnrepository.com/artifact/javax.validation/validation-api
    implementation 'javax.validation:validation-api:2.0.1.Final'

    // https://mvnrepository.com/artifact/org.primefaces/primefaces
    implementation 'org.primefaces:primefaces:11.0.0:jakarta'


}

def javacExecutable = project.javacExecutable

task compileJava {
    // Создание директории для скомпилированных классов, если она еще не существует
    doFirst {
        file("${buildDir}/classes").mkdirs()
    }
    
    // Компиляция исходных кодов
    doLast {
        // Определение каталога исходных кодов и каталога назначения для скомпилированных классов
        def srcDir = file('src/main/java')
        def classesDir = file("${buildDir}/classes")
        
        // Создание списка исходных файлов для компиляции
        def files = srcDir.listFiles().findAll { it.name.endsWith('.java') }.collect { it.absolutePath }
        
        // Формирование команды для выполнения
        def command = [
            javacExecutable,
            '-d', classesDir.absolutePath,
            '-sourcepath', srcDir.absolutePath,
            '-classpath', configurations.compileClasspath.asPath
        ] + files
        
        // Запуск процесса компиляции
        def proc = command.execute()
        proc.in.eachLine { line -> println line }
        proc.err.eachLine { line -> println "ERROR: $line" }
        proc.waitFor()
        
        // Проверка кода возврата процесса для определения статуса компиляции
        if (proc.exitValue() != 0) {
            throw new GradleException("Compilation failed with exit value: ${proc.exitValue()}")
        }
        
        println 'Компиляция завершена.'
    }
}

task clean(type: Delete) {
    delete buildDir
}

compileJava.dependsOn clean